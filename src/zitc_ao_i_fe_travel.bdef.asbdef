managed implementation in class zbp_itc_ao_i_fe_travel unique;
strict ( 2 );
with draft;

define behavior for ZITC_AO_I_FE_TRAVEL alias Travel
persistent table zitc_atrav
draft table zdtravel_AO
lock master
total etag LocalLastChangedAt
authorization master ( instance )
etag master LocalLastChangedAt
{
  create;
  update;
  delete;

  draft action Resume;
  draft action Edit;
  draft action Activate;
  draft action Discard;
  draft determine action Prepare
  {
  }

  validation validateCustomer on save { field customerid; create; }
  factory action createTravelByTemplate [1];

  // administrative fields: read only
  field ( readonly ) lastchangedat, lastchangedby, createdat, createdby;

  // mandatory fields that are required to create a travel
  field ( mandatory ) agencyid, OverallStatus, currencycode;

  field ( numbering : managed, readonly ) TravelUUID;

  // dynamic field control
  field (features : instance ) BookingFee;

  association _Booking { create; }

  mapping for zitc_atrav{
    TravelUUID = travel_uuid;
    TravelID = travel_id;
    AgencyID = agency_id;
    CustomerID = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    BookingFee = booking_fee;
    TotalPrice = total_price;
    OverallStatus = overall_status;
    CurrencyCode = currency_code;
    Description = description;
    CreatedAt = created_at;
    CreatedBy = created_by;
    LastChangedAt = last_changed_at;
    LastChangedBy = last_changed_by;
    LocalLastChangedAt = local_last_changed_at;
  }
}

define behavior for ZITC_ao_I_FE_Booking alias Booking
persistent table zitc_abook
draft table zdbook_AO
lock dependent by _Travel
authorization dependent by _Travel
//etag master <field_name>
{
  update;
  delete;
  field ( readonly ) TravelUUID;
  field ( numbering : managed, readonly ) BookingUUID;
  association _Travel;
  determination calculateTotalFlightPrice on modify { field flightprice, currencycode; create; }

  mapping for zitc_abook{
    BookingUUID = booking_uuid;
    TravelUUID = travel_uuid;
    BookingID = booking_id;
    BookingDate = booking_date;
    CarrierID = carrier_id;
    ConnectionID = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CustomerID = customer_id;
    CurrencyCode = currency_code;

  }
}